import { USState } from './insuranceTypes';

interface ZipCodeMapping {
  state: USState;
  prefixes: string[];
}

export const zipCodePrefixes: ZipCodeMapping[] = [
  { state: "AL", prefixes: ["350", "351", "354", "355", "360", "361", "363", "364", "366", "367", "368", "369", "352", "356", "357", "358", "359", "362", "365"] },
  { state: "AK", prefixes: ["996", "997", "995", "998", "999"] },
  { state: "AZ", prefixes: ["856", "853", "855", "857", "859", "850", "851", "852", "863", "864", "860", "865"] },
  { state: "AR", prefixes: ["716", "717", "718", "719", "720", "721", "723", "728", "722", "724", "725", "726", "727", "729"] },
  { state: "CA", prefixes: ["937", "936", "922", "923", "924", "925", "930", "932", "933", "956", "957", "919", "920", "921", "928", "934", "935", "939", "952", "958", "906", "907", "908", "910", "911", "912", "913", "917", "918", "926", "927", "949", "953", "954", "955", "959", "960", "961", "900", "901", "902", "905", "914", "915", "916", "931", "945", "946", "947", "948", "950", "903", "904", "940", "941", "942", "951", "943", "944"] },
  { state: "CO", prefixes: ["808", "810", "800", "801", "805", "806", "807", "802", "809", "815", "811", "812", "813", "814", "816", "803", "804"] },
  { state: "CT", prefixes: ["060", "061", "062", "063", "064", "067", "065", "066", "068", "069"] },
  { state: "DE", prefixes: ["197", "199", "198"] },
  { state: "DC", prefixes: ["200", "202", "203", "204", "205"] },
  { state: "FL", prefixes: ["335", "322", "323", "324", "325", "326", "327", "328", "336", "337", "346", "347", "349", "320", "321", "329", "338", "339", "341", "342", "344", "330", "333", "334", "331", "332"] },
  { state: "GA", prefixes: ["310", "312", "313", "314", "317", "318", "319", "301", "302", "306", "307", "308", "309", "315", "316", "398", "300", "304", "305", "303", "311"] },
  { state: "HI", prefixes: ["967", "968"] },
  { state: "ID", prefixes: ["832", "834", "833", "835", "838", "836", "837"] },
  { state: "IL", prefixes: ["612", "619", "620", "622", "623", "625", "626", "609", "610", "611", "613", "614", "615", "616", "617", "618", "624", "627", "628", "629", "604", "600", "601", "603", "605", "606", "608", "602", "607"] },
  { state: "IN", prefixes: ["470", "471", "473", "474", "460", "461", "462", "466", "472", "476", "478", "479", "463", "464", "465", "467", "468", "469", "475", "477"] },
  { state: "IA", prefixes: ["508", "514", "515", "516", "502", "503", "507", "509", "510", "511", "512", "513", "520", "522", "523", "524", "525", "526", "527", "528", "500", "501", "504", "505", "506", "521"] },
  { state: "KS", prefixes: ["667", "660", "661", "664", "665", "666", "670", "671", "673", "662", "668", "669", "672", "675", "678", "679", "674", "676", "677"] },
  { state: "KY", prefixes: ["400", "401", "402", "403", "405", "406", "407", "408", "409", "411", "412", "413", "414", "415", "416", "417", "418", "425", "426", "427", "404", "410", "420", "421", "422", "423", "424"] },
  { state: "LA", prefixes: ["700", "701", "704", "713", "714", "703", "706", "707", "708", "710", "711", "705", "712"] },
  { state: "ME", prefixes: ["040", "042", "041", "043", "044", "045", "046", "047", "048", "049", "039"] },
  { state: "MD", prefixes: ["212", "210", "211", "216", "207", "208", "209", "217"] },
  { state: "MA", prefixes: ["010", "011", "012", "027", "013", "014", "015", "018", "019", "023", "025", "026", "016", "017", "020", "021", "022", "024"] },
  { state: "MI", prefixes: ["480", "481", "483", "485", "486", "487", "482", "484", "490", "493", "494", "495", "496", "497", "488", "489", "491", "492", "498", "499"] },
  { state: "MN", prefixes: ["550", "551", "553", "554", "555", "558", "559", "560", "561", "562", "563", "564", "565", "566", "567", "556", "557"] },
  { state: "MS", prefixes: ["395", "386", "387", "388", "389", "390", "391", "392", "393", "394", "396", "397"] },
  { state: "MO", prefixes: ["635", "638", "639", "640", "644", "645", "646", "647", "653", "654", "655", "657", "630", "633", "634", "636", "637", "641", "648", "652", "656", "658", "631", "650", "651"] },
  { state: "MT", prefixes: ["590", "597", "591", "592", "593", "594", "595", "596", "598", "599"] },
  { state: "NE", prefixes: ["680", "681", "683", "684", "685", "686", "687", "688", "693"] },
  { state: "NV", prefixes: ["890", "889", "891", "893", "894", "895", "897", "898"] },
  { state: "NJ", prefixes: ["080", "082", "081", "083", "084", "071", "072", "073", "086", "087", "077", "078", "088", "089", "070", "074", "075", "085", "076", "079"] },
  { state: "NM", prefixes: ["870", "871", "873", "874", "875", "877", "878", "879", "880", "881", "882", "883", "884"] },
  { state: "NY", prefixes: ["120", "121", "128", "140", "141", "142", "143", "148", "122", "123", "124", "125", "126", "127", "129", "132", "133", "134", "135", "136", "144", "146", "147", "149", "117", "119", "130", "131", "137", "138", "139", "145", "104", "109", "105", "114", "115", "103", "106", "107", "108", "110", "111", "116", "118", "100", "102", "112", "113", "101"] },
  { state: "NC", prefixes: ["283", "270", "278", "279", "280", "287", "271", "272", "273", "274", "275", "281", "284", "285", "286", "288", "289", "276", "282", "277"] },
  { state: "ND", prefixes: ["580", "581", "582", "583", "584", "585", "586", "587", "588"] },
  { state: "OH", prefixes: ["454", "456", "444", "445", "447", "453", "455", "457", "430", "431", "435", "437", "438", "439", "440", "441", "442", "443", "446", "450", "451", "452", "432", "433", "434", "436", "448", "449", "458"] },
  { state: "OK", prefixes: ["744", "748", "735", "736", "739", "740", "743", "730", "731", "734", "737", "738", "741", "745", "746", "747", "749"] },
  { state: "OR", prefixes: ["970", "971", "972", "973", "974", "975", "976", "977", "978", "979"] },
  { state: "PA", prefixes: ["150", "151", "153", "154", "155", "156", "157", "158", "159", "160", "161", "166", "152", "162", "163", "164", "165", "167", "170", "171", "168", "172", "173", "174", "175", "178", "180", "181", "182", "183", "184", "185", "186", "187", "188", "191", "195", "169", "176", "177", "179", "189", "190", "194", "196", "192", "193"] },
  { state: "RI", prefixes: ["028", "029"] },
  { state: "SC", prefixes: ["295", "290", "291", "292", "294", "297", "299", "293", "298", "296"] },
  { state: "SD", prefixes: ["570", "571", "572", "573", "574", "575", "576", "577"] },
  { state: "TN", prefixes: ["376", "380", "381", "382", "383", "384", "370", "371", "373", "374", "377", "378", "379", "385", "372"] },
  { state: "TX", prefixes: ["780", "783", "784", "785", "794", "798", "766", "767", "779", "781", "782", "793", "797", "799", "754", "755", "756", "757", "759", "765", "775", "776", "777", "778", "786", "795", "796", "750", "751", "758", "760", "761", "762", "763", "764", "770", "772", "773", "774", "788", "768", "769", "771", "787", "789", "790", "791", "792", "885", "752", "753"] },
  { state: "UT", prefixes: ["845", "840", "842", "843", "844", "847", "841", "846"] },
  { state: "VT", prefixes: ["050", "051", "052", "053", "054", "055", "056", "057", "058", "059"] },
  { state: "VA", prefixes: ["230", "231", "232", "236", "238", "240", "241", "242", "224", "225", "229", "233", "234", "235", "237", "239", "243", "245", "246", "201", "220", "221", "222", "223", "226", "227", "228", "244"] },
  { state: "WA", prefixes: ["985", "990", "991", "992", "993", "994", "980", "981", "982", "983", "984", "986", "987", "988", "989"] },
  { state: "WV", prefixes: ["248", "255", "257", "260", "265", "247", "249", "250", "251", "252", "253", "254", "256", "258", "259", "261", "263", "264", "266", "267", "268", "262"] },
  { state: "WI", prefixes: ["532", "546", "547", "530", "531", "534", "535", "538", "539", "540", "541", "542", "544", "545", "548", "549", "537", "543"] },
  { state: "WY", prefixes: ["822", "823", "824", "825", "827", "828", "829", "830", "831", "820", "821", "826"] },
];

function isInRange(prefix: string, range: string): boolean {
  const [start, end] = range.split('-').map(Number);
  const numPrefix = Number(prefix);
  return numPrefix >= start && numPrefix <= end;
}

export function findStateByZipCode(zipCode: string): USState | null {
  const prefix = zipCode.slice(0, 3); // Extract the first three digits as prefix
  const stateEntry = zipCodePrefixes.find((entry) =>
    entry.prefixes.some((p) => p.includes('-') ? isInRange(prefix, p) : p === prefix)
  );
  return stateEntry ? stateEntry.state : null;
}